# --- Defaults ---

# --- pymarl options ---
runner: "episode" # Runs 1 env for an episode
mac: "basic_mac" # Basic controller
env: "sc2" # Environment name
common_reward: True  # Run experiment with common reward setup
reward_scalarisation: "sum"  # How to aggregate rewards to single common reward (only used if common_reward is True)
env_args: {} # Arguments for the environment
batch_size_run: 1 # Number of environments to run in parallel
test_nepisode: 20 # Number of episodes to test for
test_interval: 2000 # Test after {} timesteps have passed
test_greedy: True # Use greedy evaluation (if False, will set epsilon floor to 0
log_interval: 2000 # Log summary of stats after every {} timesteps
runner_log_interval: 2000 # Log runner stats (not test stats) every {} timesteps
learner_log_interval: 2000 # Log training stats every {} timesteps
t_max: 10000 # Stop running after this many timesteps
use_cuda: True # Use gpu by default unless it isn't available
buffer_cpu_only: True # If true we won't keep all of the replay buffer in vram

# --- Logging options ---
use_tensorboard: True # Log results to tensorboard
use_wandb: False # Log results to W&B
wandb_team: null # W&B team name
wandb_project: null # W&B project name
wandb_mode: "offline" # W&B mode (online/offline)
wandb_save_model: False # Save models to W&B (only done if use_wandb is True and save_model is True)
save_model: False # Save the models to disk
save_model_interval: 50000 # Save models after this many timesteps
checkpoint_path: "" # Load a checkpoint from this path
evaluate: False # Evaluate model for test_nepisode episodes and quit (no training)
render: True # Render the environment when evaluating (only when evaluate == True)
load_step: 0 # Load model trained on this many timesteps (0 if choose max possible)
save_replay: False # Saving the replay of the model loaded from checkpoint_path
local_results_path: "results" # Path for local results

# --- RL hyperparameters ---
gamma: 0.99
batch_size: 32 # Number of episodes to train on
buffer_size: 32 # Size of the replay buffer
lr: 0.0005 # Learning rate for agents
optim_alpha: 0.99 # RMSProp alpha
optim_eps: 0.00001 # RMSProp epsilon
grad_norm_clip: 10 # Reduce magnitude of gradients above this L2 norm
add_value_last_step: True

# --- Agent parameters ---
agent: "rnn" # Default rnn agent
hidden_dim: 64 # Size of hidden state for default rnn agent
rnn_hidden_dim: 64 # Size of hidden state for default rnn agent
obs_agent_id: True # Include the agent's one_hot id in the observation
obs_last_action: True # Include the agent's last action (one_hot) in the observation

# --- Experiment running params ---
repeat_id: 1
label: "default_label"
hypergroup: null

# --- EA options ---
# Only frac (mutation alpha) and state_alpha (beta for VMM) need to be adjusted
EA: 0

Pareto: False
rl_to_ea_synch_period: 1
pop_size: 3
elite_fraction: 0.2 # 0.4 default setting
mutation_prob: 0.3 # 0.5 default setting
prob_reset_and_sup: 0.05 # default setting
frac: 0.5 # 1.0 mutation alpha, see paper for details
pr_dim: 64  # default setting
EA_alpha: 1.0  # default setting
Org_alpha: 1.0 # default setting
N_type: 1 # default setting
SAME: 1  # default setting
start_timesteps: 10000 #10000
EA_freq : 50  # 50 default setting
state_alpha: 0.2   # 0.1 beta control VMM, see paper for details

# ----emdqn params ---
use_emdqn: False
emdqn_loss_weight: 0.01

emdqn_buffer_size: 1000000
emdqn_latent_dim: 4

use_double_predict: False


is_prioritized_buffer: False
prioritized_buffer_alpha: 0.5

# --- dmaq hyperparamter ---
is_save_buffer: False
save_buffer_size: 10000
save_buffer_interval: 1000
is_batch_rl: False
load_buffer_id: 0
save_buffer_id: 0
is_from_start: True
num_circle: 1
burn_in_period: 32

joint_random_policy_eps: 0.

use_rnn: True